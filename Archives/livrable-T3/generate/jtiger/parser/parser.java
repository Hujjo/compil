
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 07 10:37:02 UTC 2016
//----------------------------------------------------

package jtiger.parser;

import java.util.LinkedList;
import java.util.Arrays;
import java_cup.runtime.*;
import jtiger.ast.*;
import jtiger.bind.Id;
import jtiger.util.Position;
import jtiger.util.Errors;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 07 10:37:02 UTC 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\004\000\002\050\005\000\002\050" +
    "\003\000\002\046\005\000\002\046\005\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\046" +
    "\003\000\002\046\004\000\002\046\005\000\002\046\004" +
    "\000\002\046\005\000\002\045\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\051\000\012\007\007\011\005\017\006\056\011\001" +
    "\002\000\004\002\053\001\002\000\012\007\007\011\005" +
    "\017\006\056\011\001\002\000\012\007\007\011\005\017" +
    "\006\056\011\001\002\000\014\007\007\010\043\011\005" +
    "\017\006\056\011\001\002\000\034\002\uffed\016\017\017" +
    "\012\020\023\021\014\022\020\023\016\024\024\025\021" +
    "\026\022\027\015\030\013\031\025\001\002\000\042\002" +
    "\ufff2\006\ufff2\010\ufff2\012\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027" +
    "\ufff2\030\ufff2\031\ufff2\001\002\000\012\007\007\011\005" +
    "\017\006\056\011\001\002\000\012\007\007\011\005\017" +
    "\006\056\011\001\002\000\012\007\007\011\005\017\006" +
    "\056\011\001\002\000\012\007\007\011\005\017\006\056" +
    "\011\001\002\000\012\007\007\011\005\017\006\056\011" +
    "\001\002\000\012\007\007\011\005\017\006\056\011\001" +
    "\002\000\012\007\007\011\005\017\006\056\011\001\002" +
    "\000\012\007\007\011\005\017\006\056\011\001\002\000" +
    "\012\007\007\011\005\017\006\056\011\001\002\000\012" +
    "\007\007\011\005\017\006\056\011\001\002\000\012\007" +
    "\007\011\005\017\006\056\011\001\002\000\012\007\007" +
    "\011\005\017\006\056\011\001\002\000\042\002\ufff8\006" +
    "\ufff8\010\ufff8\012\ufff8\016\017\017\012\020\023\021\014" +
    "\022\020\023\016\024\024\025\021\026\022\027\015\030" +
    "\013\031\ufff8\001\002\000\026\002\ufff6\006\ufff6\010\ufff6" +
    "\012\ufff6\016\017\017\012\020\023\021\014\030\ufff6\031" +
    "\ufff6\001\002\000\042\002\ufffc\006\ufffc\010\ufffc\012\ufffc" +
    "\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024" +
    "\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\001\002" +
    "\000\026\002\ufff5\006\ufff5\010\ufff5\012\ufff5\016\017\017" +
    "\012\020\023\021\014\030\ufff5\031\ufff5\001\002\000\026" +
    "\002\ufff4\006\ufff4\010\ufff4\012\ufff4\016\017\017\012\020" +
    "\023\021\014\030\ufff4\031\ufff4\001\002\000\026\002\ufffa" +
    "\006\ufffa\010\ufffa\012\ufffa\016\017\017\012\020\023\021" +
    "\014\030\ufffa\031\ufffa\001\002\000\042\002\ufffe\006\ufffe" +
    "\010\ufffe\012\ufffe\016\ufffe\017\ufffe\020\023\021\014\022" +
    "\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe" +
    "\031\ufffe\001\002\000\026\002\ufff9\006\ufff9\010\ufff9\012" +
    "\ufff9\016\017\017\012\020\023\021\014\030\ufff9\031\ufff9" +
    "\001\002\000\026\002\ufff3\006\ufff3\010\ufff3\012\ufff3\016" +
    "\017\017\012\020\023\021\014\030\ufff3\031\ufff3\001\002" +
    "\000\042\002\ufffb\006\ufffb\010\ufffb\012\ufffb\016\ufffb\017" +
    "\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb" +
    "\026\ufffb\027\ufffb\030\ufffb\031\ufffb\001\002\000\042\002" +
    "\ufff7\006\ufff7\010\ufff7\012\ufff7\016\017\017\012\020\023" +
    "\021\014\022\020\023\016\024\024\025\021\026\022\027" +
    "\015\030\ufff7\031\ufff7\001\002\000\042\002\ufffd\006\ufffd" +
    "\010\ufffd\012\ufffd\016\ufffd\017\ufffd\020\023\021\014\022" +
    "\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd" +
    "\031\ufffd\001\002\000\004\010\047\001\002\000\042\002" +
    "\uffef\006\uffef\010\uffef\012\uffef\016\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027" +
    "\uffef\030\uffef\031\uffef\001\002\000\040\006\045\010\uffff" +
    "\012\uffff\016\017\017\012\020\023\021\014\022\020\023" +
    "\016\024\024\025\021\026\022\027\015\030\013\031\025" +
    "\001\002\000\012\007\007\011\005\017\006\056\011\001" +
    "\002\000\006\010\000\012\000\001\002\000\042\002\ufff0" +
    "\006\ufff0\010\ufff0\012\ufff0\016\ufff0\017\ufff0\020\ufff0\021" +
    "\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0" +
    "\030\ufff0\031\ufff0\001\002\000\042\002\ufff1\006\ufff1\010" +
    "\ufff1\012\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1" +
    "\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031" +
    "\ufff1\001\002\000\004\012\052\001\002\000\042\002\uffee" +
    "\006\uffee\010\uffee\012\uffee\016\uffee\017\uffee\020\uffee\021" +
    "\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee" +
    "\030\uffee\031\uffee\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\051\000\006\045\003\046\007\001\001\000\002\001" +
    "\001\000\006\046\043\050\050\001\001\000\004\046\047" +
    "\001\001\000\006\046\043\050\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\040\001\001\000\004" +
    "\046\037\001\001\000\004\046\036\001\001\000\004\046" +
    "\035\001\001\000\004\046\034\001\001\000\004\046\033" +
    "\001\001\000\004\046\032\001\001\000\004\046\031\001" +
    "\001\000\004\046\030\001\001\000\004\046\027\001\001" +
    "\000\004\046\026\001\001\000\004\046\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\046\043\050\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    @Override
    public void syntax_error(Symbol s) {
        Position p = new Position(s.left, s.right);
        Errors.error(p, "Parser Error");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // program ::= expr 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SeqExp e = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
System.out.println("Le r√©sultat est:" + e);
RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= LBRACK exprList RBRACK 
            {
              SeqExp RESULT =null;
		int elistbrackleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elistbrackright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SeqExp elistbrack = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						
						RESULT = new SeqExp(new Position(elistbrackleft, elistbrackright), elistbrack.exps);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= LPAREN RPAREN 
            {
              SeqExp RESULT =null;
		
	      				RESULT = new SeqExp(new Position(), new LinkedList<Exp>());
	      			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= LPAREN exprList RPAREN 
            {
              SeqExp RESULT =null;
		int exprlistparenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprlistparenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SeqExp exprlistparen = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	      				RESULT = new SeqExp(new Position(exprlistparenleft, exprlistparenright), exprlistparen.exps);
	      			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= MINUS expr 
            {
              SeqExp RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object minus = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SeqExp e = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
	        			RESULT = new OpExp(new Position(minusleft, minusright), new IntegerExp(new Position(), 0), "-", e); 
	        		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= INT 
            {
              SeqExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	         			RESULT = new IntegerExp(new Position(nleft, nright), n.intValue()); 
	         		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr GE expr 
            {
              SeqExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SeqExp e1 = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int geleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int geright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ge = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SeqExp e2 = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			 			RESULT = new OpExp(new Position(geleft, geright), e1, ">=", e2);
	        		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr LE expr 
            {
              SeqExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SeqExp e1 = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SeqExp e2 = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			 			RESULT = new OpExp(new Position(leleft, leright), e1, ">=", e2);
	        		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr GT expr 
            {
              SeqExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SeqExp e1 = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int gtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SeqExp e2 = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			 			RESULT = new OpExp(new Position(gtleft, gtright), e1, ">", e2);
	        		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr LT expr 
            {
              SeqExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SeqExp e1 = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SeqExp e2 = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			 			RESULT = new OpExp(new Position(ltleft, ltright), e1, "<", e2);
	        		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr AND expr 
            {
              SeqExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SeqExp e1 = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SeqExp e2 = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	      				RESULT = new IfExp(new Position(aleft, aright), e1, e2, new IntegerExp(new Position(), 0)); 
	      			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr OR expr 
            {
              SeqExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SeqExp e1 = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SeqExp e2 = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		  				RESULT = new IfExp(new Position(oleft, oright),e1,new IntegerExp(new Position(), 1), e2);
	       			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr NEQ expr 
            {
              SeqExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SeqExp e1 = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int neqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int neqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object neq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SeqExp e2 = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
          				RESULT = new OpExp(new Position(neqleft, neqright), e1, "<>", e2);
	      			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr EQ expr 
            {
              SeqExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SeqExp e1 = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SeqExp e2 = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	            		RESULT = new OpExp(new Position(eqleft, eqright), e1, "=", e2);
	       			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr DIVIDE expr 
            {
              SeqExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SeqExp e1 = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SeqExp e2 = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	      				RESULT = new OpExp(new Position(dleft, dright), e1, "/", e2);  
	      			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= expr TIMES expr 
            {
              SeqExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SeqExp e1 = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SeqExp e2 = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	      				RESULT = new OpExp(new Position(tleft, tright), e1, "*", e2);  
	      			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= expr MINUS expr 
            {
              SeqExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SeqExp e1 = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SeqExp e2 = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              			RESULT = new OpExp(new Position(mleft, mright), e1, "-", e2); 
              		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= expr PLUS expr 
            {
              SeqExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SeqExp e1 = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SeqExp e2 = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	      				RESULT = new OpExp(new Position(pleft, pright),e1, "+", e2); 
	      			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exprList ::= expr 
            {
              SeqExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SeqExp e = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						LinkedList exps_ = new LinkedList();
						exps_.add(e);
						RESULT = new SeqExp(new Position(eleft,eright),exps_);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprList",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // exprList ::= expr SEMICOLON exprList 
            {
              SeqExp RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SeqExp e2 = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int semicolonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int semicolonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object semicolon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SeqExp e1 = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						e1.exps.add(e2);
						RESULT = e1;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprList",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp start_val = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

