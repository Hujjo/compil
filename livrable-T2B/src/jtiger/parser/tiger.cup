package jtiger.parser;
import java.util.LinkedList;
import java.util.Arrays;
import java_cup.runtime.*;
import jtiger.ast.*;
import jtiger.util.Position;
import jtiger.util.Errors;

parser code {:
    @Override
    public void syntax_error(Symbol s) {
        Position p = new Position(s.left, s.right);
        Errors.error(p, "Parser Error");
    }
    //private LinkedList<Exp> l = new LinkedList<Exp>();
:};

/* Terminals */
terminal COMMA,COLON,SEMICOLON,LPAREN,RPAREN,LBRACK,RBRACK;
terminal LBRACE,RBRACE,DOT,PLUS,MINUS,TIMES,DIVIDE,EQ,NEQ,LT,LE,GT,GE;
terminal AND,OR,ASSIGN,ARRAY,IF,THEN,ELSE,WHILE,FOR,TO,DO,LET,IN,END,OF;
terminal BREAK,NIL,FUNCTION,VAR,TYPE;
terminal String ID, STRING;
terminal Integer INT;
terminal LOWPREC,UMINUS;

/* Non-terminals */
nonterminal Exp exp,intExp,opExp,negExp,seqExp,program;
nonterminal SeqExp exps;

/* Precedence */
precedence left OR;
precedence left AND;
precedence nonassoc EQ, NEQ, LT, LE, GT, GE;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left UMINUS;
precedence left LPAREN, RPAREN;

/* Grammar */

start with program;
 
program::=  exp:e
        {: 
            RESULT = e;
        :};

exp ::= intExp:e {: RESULT=e; :}
    |   opExp:e {: RESULT=e; :}
    |   negExp:e {: RESULT=e; :}
    |   seqExp:e {: RESULT=e; :}
    ;

/* intExp */
intExp ::= INT:n
        {: RESULT = new IntegerExp(new Position(nleft,nright), n); :}
        ;

/* opExp */
opExp ::= exp:e1 PLUS:p exp:e2
        {: RESULT = new OpExp(new Position(pleft,pright), e1, "+", e2); :}
        |
        exp:e1 MINUS:p exp:e2
        {: RESULT = new OpExp(new Position(pleft,pright), e1, "-", e2); :}
        |
        exp:e1 TIMES:p exp:e2
        {: RESULT = new OpExp(new Position(pleft,pright), e1, "*", e2); :}
        |
        exp:e1 DIVIDE:p exp:e2
        {: RESULT = new OpExp(new Position(pleft,pright), e1, "/", e2); :}
        |
        exp:e1 EQ:p exp:e2
        {: RESULT = new OpExp(new Position(pleft,pright), e1, "==", e2); :}
        |
        exp:e1 NEQ:p exp:e2
        {: RESULT = new OpExp(new Position(pleft,pright), e1, "<>", e2); :}
        |
        exp:e1 LT:p exp:e2
        {: RESULT = new OpExp(new Position(pleft,pright), e1, "<", e2); :}
        |
        exp:e1 LE:p exp:e2
        {: RESULT = new OpExp(new Position(pleft,pright), e1, "<=", e2); :}
        |
        exp:e1 GT:p exp:e2
        {: RESULT = new OpExp(new Position(pleft,pright), e1, ">", e2); :}
        |
        exp:e1 GE:p exp:e2
        {: RESULT = new OpExp(new Position(pleft,pright), e1, ">=", e2); :}
        |
        exp:e1 AND:p exp:e2
        {: 
           RESULT = new IfExp(new Position(pleft,pright), e1, e2, new IntegerExp(new Position(pleft,pright), 0));
        :}
        |
        exp:e1 OR:p exp:e2
        {: 
            RESULT = new IfExp(new Position(pleft,pright), e1, new IntegerExp(new Position(pleft,pright), 1), e2); :}
        ;

/* negExp */
negExp::= MINUS:p exp:e
        {: RESULT = new OpExp(new Position(pleft,pright), new IntegerExp(new Position(pleft,pright), 0), "-", e); :}
        %prec UMINUS
        ;

/* seqExp */
seqExp::= LPAREN:l exps:es RPAREN:r {: RESULT=es; :}
        | 
        LPAREN RPAREN:s 
        {:LinkedList<Exp> l = new LinkedList<Exp>(); RESULT = new SeqExp(new Position(sleft,sright), l);:}
        ;

exps ::= exp:e {: LinkedList<Exp> l = new LinkedList<Exp>(); l.add(e); RESULT = new SeqExp(new Position(eleft,eright), l); :}
    |    exps:es SEMICOLON exp:e {:  es.exps.add(e); RESULT = es; :}
    ;
