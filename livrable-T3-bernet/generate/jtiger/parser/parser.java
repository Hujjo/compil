
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 19 15:16:11 CEST 2017
//----------------------------------------------------

package jtiger.parser;

import java.util.LinkedList;
import java.util.Arrays;
import java_cup.runtime.*;
import jtiger.ast.*;
import jtiger.util.Position;
import jtiger.util.Errors;
import jtiger.bind.Id;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 19 15:16:11 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\007\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\003\003\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\005\004\000\002" +
    "\006\005\000\002\006\004\000\002\013\003\000\002\013" +
    "\005\000\002\010\007\000\002\010\006\000\002\016\003" +
    "\000\002\016\004\000\002\017\003\000\002\017\003\000" +
    "\002\020\007\000\002\014\003\000\002\014\004\000\002" +
    "\015\012\000\002\022\003\000\002\022\005\000\002\021" +
    "\005\000\002\012\004\000\002\011\003\000\002\023\003" +
    "\000\002\024\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\026\003\000\002\030\006\000\002" +
    "\027\005\000\002\031\005\000\002\034\006\000\002\032" +
    "\003\000\002\032\005\000\002\032\003\000\002\033\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\020\007\011\017\022\043\023\050\012\054" +
    "\013\055\015\056\005\001\002\000\052\002\ufff9\006\ufff9" +
    "\010\ufff9\012\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022" +
    "\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9" +
    "\031\ufff9\044\ufff9\045\ufff9\051\ufff9\052\ufff9\001\002\000" +
    "\052\002\ufff6\006\ufff6\010\ufff6\012\ufff6\016\ufff6\017\ufff6" +
    "\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026" +
    "\ufff6\027\ufff6\030\ufff6\031\ufff6\044\ufff6\045\ufff6\051\ufff6" +
    "\052\ufff6\001\002\000\060\002\uffd3\006\uffd3\010\uffd3\011" +
    "\uffd3\012\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\032\uffd3\044\uffd3\045\uffd3\051\uffd3\052\uffd3" +
    "\001\002\000\034\002\000\016\044\017\037\020\050\021" +
    "\041\022\045\023\043\024\051\025\046\026\047\027\042" +
    "\030\040\031\052\001\002\000\004\002\140\001\002\000" +
    "\022\007\011\010\136\017\022\043\023\050\012\054\013" +
    "\055\015\056\005\001\002\000\052\002\uffd5\006\uffd5\010" +
    "\uffd5\012\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\044\uffd5\045\uffd5\051\uffd5\052\uffd5\001\002\000\066" +
    "\002\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011" +
    "\uffd6\012\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\044\uffd6\045\uffd6\051\uffd6\052\uffd6" +
    "\001\002\000\052\002\ufffb\006\ufffb\010\ufffb\012\ufffb\016" +
    "\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\044\ufffb\045" +
    "\ufffb\051\ufffb\052\ufffb\001\002\000\052\002\uffd4\006\uffd4" +
    "\010\uffd4\012\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\044\uffd4\045\uffd4\051\uffd4\052\uffd4\001\002\000" +
    "\052\002\ufff7\006\ufff7\010\ufff7\012\ufff7\016\ufff7\017\ufff7" +
    "\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026" +
    "\ufff7\027\ufff7\030\ufff7\031\ufff7\044\ufff7\045\ufff7\051\ufff7" +
    "\052\ufff7\001\002\000\060\002\uffd0\006\uffd0\010\uffd0\011" +
    "\uffd0\012\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\044\uffd0\045\uffd0\051\uffd0\052\uffd0" +
    "\001\002\000\060\002\uffd2\006\uffd2\010\uffd2\011\uffd2\012" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\044\uffd2\045\uffd2\051\uffd2\052\uffd2\001\002" +
    "\000\052\002\uffff\006\uffff\010\uffff\012\uffff\016\uffff\017" +
    "\uffff\020\uffff\021\uffff\022\uffff\023\uffff\024\uffff\025\uffff" +
    "\026\uffff\027\uffff\030\uffff\031\uffff\044\uffff\045\uffff\051" +
    "\uffff\052\uffff\001\002\000\020\007\011\017\022\043\023" +
    "\050\012\054\013\055\015\056\005\001\002\000\006\051" +
    "\074\052\071\001\002\000\052\002\ufffd\006\ufffd\010\ufffd" +
    "\012\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023" +
    "\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd" +
    "\044\ufffd\045\ufffd\051\ufffd\052\ufffd\001\002\000\052\002" +
    "\ufffe\006\ufffe\010\ufffe\012\ufffe\016\ufffe\017\ufffe\020\ufffe" +
    "\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027" +
    "\ufffe\030\ufffe\031\ufffe\044\ufffe\045\ufffe\051\ufffe\052\ufffe" +
    "\001\002\000\060\002\ufff8\006\ufff8\010\ufff8\011\032\012" +
    "\ufff8\015\034\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8" +
    "\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031" +
    "\ufff8\032\033\044\ufff8\045\ufff8\051\ufff8\052\ufff8\001\002" +
    "\000\060\002\uffd1\006\uffd1\010\uffd1\011\uffd1\012\uffd1\015" +
    "\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\044\uffd1\045\uffd1\051\uffd1\052\uffd1\001\002\000\052" +
    "\002\ufffc\006\ufffc\010\ufffc\012\ufffc\016\ufffc\017\ufffc\020" +
    "\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc" +
    "\027\ufffc\030\ufffc\031\ufffc\044\ufffc\045\ufffc\051\ufffc\052" +
    "\ufffc\001\002\000\052\002\ufffa\006\ufffa\010\ufffa\012\ufffa" +
    "\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024" +
    "\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\044\ufffa" +
    "\045\ufffa\051\ufffa\052\ufffa\001\002\000\020\007\011\017" +
    "\022\043\023\050\012\054\013\055\015\056\005\001\002" +
    "\000\020\007\011\017\022\043\023\050\012\054\013\055" +
    "\015\056\005\001\002\000\004\054\013\001\002\000\060" +
    "\002\uffce\006\uffce\010\uffce\011\uffce\012\uffce\015\uffce\016" +
    "\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\044" +
    "\uffce\045\uffce\051\uffce\052\uffce\001\002\000\052\002\uffcd" +
    "\006\uffcd\010\uffcd\012\uffcd\016\044\017\037\020\050\021" +
    "\041\022\045\023\043\024\051\025\046\026\047\027\042" +
    "\030\040\031\052\044\uffcd\045\uffcd\051\uffcd\052\uffcd\001" +
    "\002\000\020\007\011\017\022\043\023\050\012\054\013" +
    "\055\015\056\005\001\002\000\020\007\011\017\022\043" +
    "\023\050\012\054\013\055\015\056\005\001\002\000\020" +
    "\007\011\017\022\043\023\050\012\054\013\055\015\056" +
    "\005\001\002\000\020\007\011\017\022\043\023\050\012" +
    "\054\013\055\015\056\005\001\002\000\020\007\011\017" +
    "\022\043\023\050\012\054\013\055\015\056\005\001\002" +
    "\000\020\007\011\017\022\043\023\050\012\054\013\055" +
    "\015\056\005\001\002\000\020\007\011\017\022\043\023" +
    "\050\012\054\013\055\015\056\005\001\002\000\020\007" +
    "\011\017\022\043\023\050\012\054\013\055\015\056\005" +
    "\001\002\000\020\007\011\017\022\043\023\050\012\054" +
    "\013\055\015\056\005\001\002\000\020\007\011\017\022" +
    "\043\023\050\012\054\013\055\015\056\005\001\002\000" +
    "\020\007\011\017\022\043\023\050\012\054\013\055\015" +
    "\056\005\001\002\000\020\007\011\017\022\043\023\050" +
    "\012\054\013\055\015\056\005\001\002\000\052\002\uffea" +
    "\006\uffea\010\uffea\012\uffea\016\044\017\037\020\050\021" +
    "\041\022\045\023\043\024\051\025\046\026\047\027\042" +
    "\030\040\031\uffea\044\uffea\045\uffea\051\uffea\052\uffea\001" +
    "\002\000\036\002\uffef\006\uffef\010\uffef\012\uffef\016\044" +
    "\017\037\020\050\021\041\030\uffef\031\uffef\044\uffef\045" +
    "\uffef\051\uffef\052\uffef\001\002\000\052\002\ufff3\006\ufff3" +
    "\010\ufff3\012\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022" +
    "\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3" +
    "\031\ufff3\044\ufff3\045\ufff3\051\ufff3\052\ufff3\001\002\000" +
    "\036\002\uffed\006\uffed\010\uffed\012\uffed\016\044\017\037" +
    "\020\050\021\041\030\uffed\031\uffed\044\uffed\045\uffed\051" +
    "\uffed\052\uffed\001\002\000\036\002\uffee\006\uffee\010\uffee" +
    "\012\uffee\016\044\017\037\020\050\021\041\030\uffee\031" +
    "\uffee\044\uffee\045\uffee\051\uffee\052\uffee\001\002\000\036" +
    "\002\ufff1\006\ufff1\010\ufff1\012\ufff1\016\044\017\037\020" +
    "\050\021\041\030\ufff1\031\ufff1\044\ufff1\045\ufff1\051\ufff1" +
    "\052\ufff1\001\002\000\052\002\ufff5\006\ufff5\010\ufff5\012" +
    "\ufff5\016\ufff5\017\ufff5\020\050\021\041\022\ufff5\023\ufff5" +
    "\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\044" +
    "\ufff5\045\ufff5\051\ufff5\052\ufff5\001\002\000\036\002\ufff0" +
    "\006\ufff0\010\ufff0\012\ufff0\016\044\017\037\020\050\021" +
    "\041\030\ufff0\031\ufff0\044\ufff0\045\ufff0\051\ufff0\052\ufff0" +
    "\001\002\000\036\002\uffec\006\uffec\010\uffec\012\uffec\016" +
    "\044\017\037\020\050\021\041\030\uffec\031\uffec\044\uffec" +
    "\045\uffec\051\uffec\052\uffec\001\002\000\052\002\ufff2\006" +
    "\ufff2\010\ufff2\012\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030" +
    "\ufff2\031\ufff2\044\ufff2\045\ufff2\051\ufff2\052\ufff2\001\002" +
    "\000\052\002\uffeb\006\uffeb\010\uffeb\012\uffeb\016\044\017" +
    "\037\020\050\021\041\022\045\023\043\024\051\025\046" +
    "\026\047\027\042\030\uffeb\031\uffeb\044\uffeb\045\uffeb\051" +
    "\uffeb\052\uffeb\001\002\000\052\002\ufff4\006\ufff4\010\ufff4" +
    "\012\ufff4\016\ufff4\017\ufff4\020\050\021\041\022\ufff4\023" +
    "\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\044\ufff4\045\ufff4\051\ufff4\052\ufff4\001\002\000\034\012" +
    "\070\016\044\017\037\020\050\021\041\022\045\023\043" +
    "\024\051\025\046\026\047\027\042\030\040\031\052\001" +
    "\002\000\060\002\uffcf\006\uffcf\010\uffcf\011\uffcf\012\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\044\uffcf\045\uffcf\051\uffcf\052\uffcf\001\002\000" +
    "\004\054\013\001\002\000\010\044\uffdd\051\uffdd\052\uffdd" +
    "\001\002\000\010\044\120\051\074\052\071\001\002\000" +
    "\004\054\013\001\002\000\010\044\uffe0\051\uffe0\052\uffe0" +
    "\001\002\000\010\044\uffe2\051\uffe2\052\uffe2\001\002\000" +
    "\010\044\uffdf\051\074\052\uffdf\001\002\000\010\044\uffdc" +
    "\051\uffdc\052\uffdc\001\002\000\004\007\102\001\002\000" +
    "\004\054\013\001\002\000\006\004\uffda\010\uffda\001\002" +
    "\000\006\004\110\010\111\001\002\000\004\005\106\001" +
    "\002\000\004\054\013\001\002\000\006\004\uffd8\010\uffd8" +
    "\001\002\000\004\054\013\001\002\000\004\005\113\001" +
    "\002\000\004\022\115\001\002\000\004\054\013\001\002" +
    "\000\006\022\uffd7\032\uffd7\001\002\000\020\007\011\017" +
    "\022\043\023\050\012\054\013\055\015\056\005\001\002" +
    "\000\040\016\044\017\037\020\050\021\041\022\045\023" +
    "\043\024\051\025\046\026\047\027\042\030\040\031\052" +
    "\044\uffdb\051\uffdb\052\uffdb\001\002\000\006\004\uffd9\010" +
    "\uffd9\001\002\000\022\007\011\017\022\043\023\045\123" +
    "\050\012\054\013\055\015\056\005\001\002\000\010\044" +
    "\uffe1\051\uffe1\052\uffe1\001\002\000\006\006\125\045\126" +
    "\001\002\000\052\002\uffe3\006\uffe3\010\uffe3\012\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\044\uffe3\045" +
    "\uffe3\051\uffe3\052\uffe3\001\002\000\040\006\uffe6\010\uffe6" +
    "\016\044\017\037\020\050\021\041\022\045\023\043\024" +
    "\051\025\046\026\047\027\042\030\040\031\052\045\uffe6" +
    "\001\002\000\020\007\011\017\022\043\023\050\012\054" +
    "\013\055\015\056\005\001\002\000\052\002\uffe4\006\uffe4" +
    "\010\uffe4\012\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\044\uffe4\045\uffe4\051\uffe4\052\uffe4\001\002\000" +
    "\040\006\uffe5\010\uffe5\016\044\017\037\020\050\021\041" +
    "\022\045\023\043\024\051\025\046\026\047\027\042\030" +
    "\040\031\052\045\uffe5\001\002\000\004\005\113\001\002" +
    "\000\004\032\132\001\002\000\020\007\011\017\022\043" +
    "\023\050\012\054\013\055\015\056\005\001\002\000\040" +
    "\016\044\017\037\020\050\021\041\022\045\023\043\024" +
    "\051\025\046\026\047\027\042\030\040\031\052\044\uffde" +
    "\051\uffde\052\uffde\001\002\000\052\002\uffe9\006\uffe9\010" +
    "\uffe9\012\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\044\uffe9\045\uffe9\051\uffe9\052\uffe9\001\002\000\006" +
    "\006\125\010\137\001\002\000\052\002\uffe7\006\uffe7\010" +
    "\uffe7\012\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7" +
    "\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031" +
    "\uffe7\044\uffe7\045\uffe7\051\uffe7\052\uffe7\001\002\000\052" +
    "\002\uffe8\006\uffe8\010\uffe8\012\uffe8\016\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\031\uffe8\044\uffe8\045\uffe8\051\uffe8\052" +
    "\uffe8\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\040\002\006\003\020\004\024\005\023\006" +
    "\027\007\007\010\013\011\016\023\030\024\003\025\025" +
    "\026\005\027\026\030\017\031\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\002\123\003\020\004\024\005" +
    "\023\006\027\010\013\011\016\013\134\023\030\024\003" +
    "\025\025\026\005\027\026\030\017\031\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\002\133\003\020\004\024" +
    "\005\023\006\027\010\013\011\016\023\030\024\003\025" +
    "\025\026\005\027\026\030\017\031\015\001\001\000\014" +
    "\014\076\015\071\016\072\017\075\020\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\002" +
    "\066\003\020\004\024\005\023\006\027\010\013\011\016" +
    "\023\030\024\003\025\025\026\005\027\026\030\017\031" +
    "\015\001\001\000\036\002\035\003\020\004\024\005\023" +
    "\006\027\010\013\011\016\023\030\024\003\025\025\026" +
    "\005\027\026\030\017\031\015\001\001\000\004\011\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\002" +
    "\065\003\020\004\024\005\023\006\027\010\013\011\016" +
    "\023\030\024\003\025\025\026\005\027\026\030\017\031" +
    "\015\001\001\000\036\002\064\003\020\004\024\005\023" +
    "\006\027\010\013\011\016\023\030\024\003\025\025\026" +
    "\005\027\026\030\017\031\015\001\001\000\036\002\063" +
    "\003\020\004\024\005\023\006\027\010\013\011\016\023" +
    "\030\024\003\025\025\026\005\027\026\030\017\031\015" +
    "\001\001\000\036\002\062\003\020\004\024\005\023\006" +
    "\027\010\013\011\016\023\030\024\003\025\025\026\005" +
    "\027\026\030\017\031\015\001\001\000\036\002\061\003" +
    "\020\004\024\005\023\006\027\010\013\011\016\023\030" +
    "\024\003\025\025\026\005\027\026\030\017\031\015\001" +
    "\001\000\036\002\060\003\020\004\024\005\023\006\027" +
    "\010\013\011\016\023\030\024\003\025\025\026\005\027" +
    "\026\030\017\031\015\001\001\000\036\002\057\003\020" +
    "\004\024\005\023\006\027\010\013\011\016\023\030\024" +
    "\003\025\025\026\005\027\026\030\017\031\015\001\001" +
    "\000\036\002\056\003\020\004\024\005\023\006\027\010" +
    "\013\011\016\023\030\024\003\025\025\026\005\027\026" +
    "\030\017\031\015\001\001\000\036\002\055\003\020\004" +
    "\024\005\023\006\027\010\013\011\016\023\030\024\003" +
    "\025\025\026\005\027\026\030\017\031\015\001\001\000" +
    "\036\002\054\003\020\004\024\005\023\006\027\010\013" +
    "\011\016\023\030\024\003\025\025\026\005\027\026\030" +
    "\017\031\015\001\001\000\036\002\053\003\020\004\024" +
    "\005\023\006\027\010\013\011\016\023\030\024\003\025" +
    "\025\026\005\027\026\030\017\031\015\001\001\000\036" +
    "\002\052\003\020\004\024\005\023\006\027\010\013\011" +
    "\016\023\030\024\003\025\025\026\005\027\026\030\017" +
    "\031\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\127\001" +
    "\001\000\002\001\001\000\012\014\076\015\071\017\120" +
    "\020\074\001\001\000\004\011\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\104\021\102\022" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\106\001\001\000\002\001\001\000" +
    "\006\011\104\021\116\001\001\000\004\012\111\001\001" +
    "\000\002\001\001\000\004\011\113\001\001\000\002\001" +
    "\001\000\036\002\115\003\020\004\024\005\023\006\027" +
    "\010\013\011\016\023\030\024\003\025\025\026\005\027" +
    "\026\030\017\031\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\002\123\003\020\004\024\005\023\006" +
    "\027\010\013\011\016\013\121\023\030\024\003\025\025" +
    "\026\005\027\026\030\017\031\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\002\126\003\020\004\024\005\023\006\027\010" +
    "\013\011\016\023\030\024\003\025\025\026\005\027\026" +
    "\030\017\031\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\130\001\001\000\002\001\001\000\036" +
    "\002\132\003\020\004\024\005\023\006\027\010\013\011" +
    "\016\023\030\024\003\025\025\026\005\027\026\030\017" +
    "\031\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    @Override
    public void syntax_error(Symbol s) {
        Position p = new Position(s.left, s.right);
        Errors.error(p, "Parser Error");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // argument ::= exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arguments ::= nilExp 
            {
              LinkedList<Exp> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NilExp n = (NilExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NilExp(new Position(nleft,nright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arguments ::= arguments COMMA argument 
            {
              LinkedList<Exp> RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Exp> as = (LinkedList<Exp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 as.add(a); RESULT = as; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arguments ::= argument 
            {
              LinkedList<Exp> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			LinkedList<Exp> l = new LinkedList<Exp>(); l.add(p);
			RESULT = l;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // callExp ::= id LPAREN arguments RPAREN 
            {
              CallExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Exp> as = (LinkedList<Exp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new callExp(new Position(ileft,iright),i,as); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callExp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // assignExp ::= var ASSIGN exp 
            {
              AssignExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignExp(new Position(vleft,vright),v,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignExp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // recordVar ::= var DOT id 
            {
              RecordVar RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RecordVar(new Position(vleft,vright),v,i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recordVar",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arrayVar ::= var LBRACK exp RBRACK 
            {
              ArrayVar RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayVar(new Position(vleft,vright),v,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayVar",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simpleVar ::= id 
            {
              SimpleVar RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimpleVar(new Position(ileft,iright),i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleVar",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // var ::= recordVar 
            {
              Var RESULT =null;
		int rvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RecordVar rv = (RecordVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // var ::= arrayVar 
            {
              Var RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayVar av = (ArrayVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = av; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // var ::= simpleVar 
            {
              Var RESULT =null;
		int svleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int svright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleVar sv = (SimpleVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stringExp ::= STRING 
            {
              StringExp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringExp(new Position(sleft,sright),s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringExp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // nilExp ::= NIL 
            {
              NilExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NilExp(new Position(nleft,nright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nilExp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // id ::= ID 
            {
              Id RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Id.create(i);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // typeannotation ::= COLON id 
            {
              Id RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeannotation",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // param ::= id COLON id 
            {
              VarDec RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Id i1 = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Id i2 = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDec(new Position(i1left,i1right),i1,i2,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // params ::= params COMMA param 
            {
              LinkedList<VarDec> RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<VarDec> ps = (LinkedList<VarDec>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec p = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ps.add(p); RESULT = ps; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // params ::= param 
            {
              LinkedList<VarDec> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec p = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                LinkedList<VarDec> l = new LinkedList<VarDec>(); l.add(p);
                RESULT = l;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // funcDec ::= FUNCTION id LPAREN params RPAREN typeannotation EQ exp 
            {
              FuncDec RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<VarDec> ps = (LinkedList<VarDec>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Id t = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FuncDec(new Position(fleft,fright),i,ps,t,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcDec",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // funcsDec ::= funcsDec funcDec 
            {
              FuncsDec RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FuncsDec ds = (FuncsDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FuncDec d = (FuncDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ds.funcs.add(d); RESULT = ds; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcsDec",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funcsDec ::= funcDec 
            {
              FuncsDec RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FuncDec d = (FuncDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                LinkedList<FuncDec> l = new LinkedList<FuncDec>(); l.add(d);
                RESULT = new FuncsDec(new Position(dleft,dright),l);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcsDec",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // varDec ::= VAR id typeannotation ASSIGN exp 
            {
              Dec RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Id t = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDec(new Position(vleft,vright),i,t,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDec",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // dec ::= funcsDec 
            {
              Dec RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FuncsDec fs = (FuncsDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dec ::= varDec 
            {
              Dec RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec v = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // decs ::= decs dec 
            {
              LinkedList<Dec> RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Dec> ds = (LinkedList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ds.add(d); RESULT = ds; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decs",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // decs ::= dec 
            {
              LinkedList<Dec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                LinkedList<Dec> l = new LinkedList<Dec>(); l.add(d);
                RESULT = l;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decs",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // letExp ::= LET decs IN END 
            {
              LetExp RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Dec> ds = (LinkedList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new LetExp(new Position(ltleft,ltright),ds,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("letExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // letExp ::= LET decs IN exps END 
            {
              LetExp RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Dec> ds = (LinkedList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SeqExp es = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LetExp(new Position(ltleft,ltright),ds,es); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("letExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exps ::= exps SEMICOLON exp 
            {
              SeqExp RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SeqExp es = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  es.exps.add(e); RESULT = es; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exps",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exps ::= exp 
            {
              SeqExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            LinkedList<Exp> l = new LinkedList<Exp>(); l.add(e);
            RESULT = new SeqExp(new Position(eleft,eright), l); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exps",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // seqExp ::= LPAREN RPAREN 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Exp> l = new LinkedList<Exp>(); RESULT = new SeqExp(new Position(sleft,sright), l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seqExp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // seqExp ::= LPAREN exps RPAREN 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SeqExp es = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=es; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seqExp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // negExp ::= MINUS exp 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(new Position(pleft,pright), new IntegerExp(new Position(pleft,pright), 0), "-", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("negExp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // opExp ::= exp OR exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new IfExp(new Position(pleft,pright), e1, new IntegerExp(new Position(pleft,pright), 1), e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opExp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // opExp ::= exp AND exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
           RESULT = new IfExp(new Position(pleft,pright), e1, e2, new IntegerExp(new Position(pleft,pright), 0));
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opExp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // opExp ::= exp GE exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(new Position(pleft,pright), e1, ">=", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opExp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // opExp ::= exp GT exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(new Position(pleft,pright), e1, ">", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opExp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // opExp ::= exp LE exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(new Position(pleft,pright), e1, "<=", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opExp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // opExp ::= exp LT exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(new Position(pleft,pright), e1, "<", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opExp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // opExp ::= exp NEQ exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(new Position(pleft,pright), e1, "<>", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opExp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // opExp ::= exp EQ exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(new Position(pleft,pright), e1, "==", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opExp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // opExp ::= exp DIVIDE exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(new Position(pleft,pright), e1, "/", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opExp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // opExp ::= exp TIMES exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(new Position(pleft,pright), e1, "*", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opExp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // opExp ::= exp MINUS exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(new Position(pleft,pright), e1, "-", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opExp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // opExp ::= exp PLUS exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(new Position(pleft,pright), e1, "+", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opExp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // intExp ::= INT 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntegerExp(new Position(nleft,nright), n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intExp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= assignExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignExp e = (AssignExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp ::= var 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var e = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp ::= stringExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StringExp e = (StringExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp ::= nilExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NilExp e = (NilExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exp ::= letExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LetExp e = (LetExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // exp ::= seqExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // exp ::= negExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // exp ::= opExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exp ::= intExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = e;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp start_val = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

