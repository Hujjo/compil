
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 19 20:16:09 UTC 2017
//----------------------------------------------------

package jtiger.parser;

import java.util.LinkedList;
import java.util.Arrays;
import java_cup.runtime.*;
import jtiger.ast.*;
import jtiger.util.Position;
import jtiger.util.Errors;
import jtiger.bind.Id;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 19 20:16:09 UTC 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\007\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\003\003\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\005\004\000\002\006\005\000\002\006\004" +
    "\000\002\013\003\000\002\013\005\000\002\010\007\000" +
    "\002\010\006\000\002\016\003\000\002\016\004\000\002" +
    "\017\003\000\002\017\003\000\002\020\007\000\002\014" +
    "\003\000\002\014\004\000\002\015\012\000\002\022\003" +
    "\000\002\022\005\000\002\021\005\000\002\012\002\000" +
    "\002\012\004\000\002\011\003\000\002\023\003\000\002" +
    "\024\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\026\003\000\002\030\006\000\002\027\005" +
    "\000\002\031\005\000\002\034\006\000\002\034\005\000" +
    "\002\032\003\000\002\032\005\000\002\033\003\000\002" +
    "\035\003\000\002\037\006\000\002\036\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\026\007\015\017\031\034\012\037\006\043" +
    "\032\047\027\050\016\054\017\055\021\056\005\001\002" +
    "\000\062\002\ufff9\004\ufff9\006\ufff9\010\ufff9\012\ufff9\016" +
    "\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9" +
    "\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\035\ufff9\036" +
    "\ufff9\042\ufff9\044\ufff9\045\ufff9\051\ufff9\052\ufff9\001\002" +
    "\000\062\002\ufff1\004\ufff1\006\ufff1\010\ufff1\012\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1" +
    "\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\035\ufff1\036" +
    "\ufff1\042\ufff1\044\ufff1\045\ufff1\051\ufff1\052\ufff1\001\002" +
    "\000\026\007\015\017\031\034\012\037\006\043\032\047" +
    "\027\050\016\054\017\055\021\056\005\001\002\000\070" +
    "\002\uffcd\004\uffcd\006\uffcd\010\uffcd\011\uffcd\012\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\035\uffcd\036\uffcd\042\uffcd\044\uffcd\045\uffcd\051\uffcd" +
    "\052\uffcd\001\002\000\062\002\ufff6\004\ufff6\006\ufff6\010" +
    "\ufff6\012\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031" +
    "\ufff6\035\ufff6\036\ufff6\042\ufff6\044\ufff6\045\ufff6\051\ufff6" +
    "\052\ufff6\001\002\000\034\002\000\016\054\017\047\020" +
    "\060\021\051\022\055\023\053\024\061\025\056\026\057" +
    "\027\052\030\050\031\062\001\002\000\026\007\015\017" +
    "\031\034\012\037\006\043\032\047\027\050\016\054\017" +
    "\055\021\056\005\001\002\000\062\002\ufff3\004\ufff3\006" +
    "\ufff3\010\ufff3\012\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030" +
    "\ufff3\031\ufff3\035\ufff3\036\ufff3\042\ufff3\044\ufff3\045\ufff3" +
    "\051\ufff3\052\ufff3\001\002\000\004\002\160\001\002\000" +
    "\030\007\015\010\156\017\031\034\012\037\006\043\032" +
    "\047\027\050\016\054\017\055\021\056\005\001\002\000" +
    "\062\002\uffcf\004\uffcf\006\uffcf\010\uffcf\012\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\035\uffcf\036\uffcf" +
    "\042\uffcf\044\uffcf\045\uffcf\051\uffcf\052\uffcf\001\002\000" +
    "\074\002\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0" +
    "\011\uffd0\012\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0" +
    "\030\uffd0\031\uffd0\032\uffd0\035\uffd0\036\uffd0\042\uffd0\044" +
    "\uffd0\045\uffd0\051\uffd0\052\uffd0\001\002\000\062\002\ufffb" +
    "\004\ufffb\006\ufffb\010\ufffb\012\ufffb\016\ufffb\017\ufffb\020" +
    "\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb" +
    "\027\ufffb\030\ufffb\031\ufffb\035\ufffb\036\ufffb\042\ufffb\044" +
    "\ufffb\045\ufffb\051\ufffb\052\ufffb\001\002\000\062\002\uffce" +
    "\004\uffce\006\uffce\010\uffce\012\uffce\016\uffce\017\uffce\020" +
    "\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce" +
    "\027\uffce\030\uffce\031\uffce\035\uffce\036\uffce\042\uffce\044" +
    "\uffce\045\uffce\051\uffce\052\uffce\001\002\000\062\002\ufff2" +
    "\004\ufff2\006\ufff2\010\ufff2\012\ufff2\016\ufff2\017\ufff2\020" +
    "\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2" +
    "\027\ufff2\030\ufff2\031\ufff2\035\ufff2\036\ufff2\042\ufff2\044" +
    "\ufff2\045\ufff2\051\ufff2\052\ufff2\001\002\000\062\002\ufff7" +
    "\004\ufff7\006\ufff7\010\ufff7\012\ufff7\016\ufff7\017\ufff7\020" +
    "\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7" +
    "\027\ufff7\030\ufff7\031\ufff7\035\ufff7\036\ufff7\042\ufff7\044" +
    "\ufff7\045\ufff7\051\ufff7\052\ufff7\001\002\000\062\002\ufff4" +
    "\004\ufff4\006\ufff4\010\ufff4\012\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4" +
    "\027\ufff4\030\ufff4\031\ufff4\035\ufff4\036\ufff4\042\ufff4\044" +
    "\ufff4\045\ufff4\051\ufff4\052\ufff4\001\002\000\070\002\uffcc" +
    "\004\uffcc\006\uffcc\010\uffcc\011\uffcc\012\uffcc\015\uffcc\016" +
    "\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\035" +
    "\uffcc\036\uffcc\042\uffcc\044\uffcc\045\uffcc\051\uffcc\052\uffcc" +
    "\001\002\000\072\002\uffca\004\uffca\006\uffca\007\145\010" +
    "\uffca\011\uffca\012\uffca\015\uffca\016\uffca\017\uffca\020\uffca" +
    "\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027" +
    "\uffca\030\uffca\031\uffca\032\uffca\035\uffca\036\uffca\042\uffca" +
    "\044\uffca\045\uffca\051\uffca\052\uffca\001\002\000\062\002" +
    "\uffc1\004\uffc1\006\uffc1\010\uffc1\012\uffc1\016\uffc1\017\uffc1" +
    "\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026" +
    "\uffc1\027\uffc1\030\uffc1\031\uffc1\035\uffc1\036\uffc1\042\uffc1" +
    "\044\uffc1\045\uffc1\051\uffc1\052\uffc1\001\002\000\062\002" +
    "\uffff\004\uffff\006\uffff\010\uffff\012\uffff\016\uffff\017\uffff" +
    "\020\uffff\021\uffff\022\uffff\023\uffff\024\uffff\025\uffff\026" +
    "\uffff\027\uffff\030\uffff\031\uffff\035\uffff\036\uffff\042\uffff" +
    "\044\uffff\045\uffff\051\uffff\052\uffff\001\002\000\026\007" +
    "\015\017\031\034\012\037\006\043\032\047\027\050\016" +
    "\054\017\055\021\056\005\001\002\000\006\051\105\052" +
    "\101\001\002\000\062\002\ufffd\004\ufffd\006\ufffd\010\ufffd" +
    "\012\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023" +
    "\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd" +
    "\035\ufffd\036\ufffd\042\ufffd\044\ufffd\045\ufffd\051\ufffd\052" +
    "\ufffd\001\002\000\062\002\ufffe\004\ufffe\006\ufffe\010\ufffe" +
    "\012\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023" +
    "\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe" +
    "\035\ufffe\036\ufffe\042\ufffe\044\ufffe\045\ufffe\051\ufffe\052" +
    "\ufffe\001\002\000\062\002\ufff5\004\ufff5\006\ufff5\010\ufff5" +
    "\012\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023" +
    "\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5" +
    "\035\ufff5\036\ufff5\042\ufff5\044\ufff5\045\ufff5\051\ufff5\052" +
    "\ufff5\001\002\000\070\002\ufff8\004\ufff8\006\ufff8\010\ufff8" +
    "\011\042\012\ufff8\015\044\016\ufff8\017\ufff8\020\ufff8\021" +
    "\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8" +
    "\030\ufff8\031\ufff8\032\043\035\ufff8\036\ufff8\042\ufff8\044" +
    "\ufff8\045\ufff8\051\ufff8\052\ufff8\001\002\000\070\002\uffcb" +
    "\004\uffcb\006\uffcb\010\uffcb\011\uffcb\012\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\035" +
    "\uffcb\036\uffcb\042\uffcb\044\uffcb\045\uffcb\051\uffcb\052\uffcb" +
    "\001\002\000\062\002\ufffc\004\ufffc\006\ufffc\010\ufffc\012" +
    "\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc" +
    "\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\035" +
    "\ufffc\036\ufffc\042\ufffc\044\ufffc\045\ufffc\051\ufffc\052\ufffc" +
    "\001\002\000\062\002\ufffa\004\ufffa\006\ufffa\010\ufffa\012" +
    "\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa" +
    "\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\035" +
    "\ufffa\036\ufffa\042\ufffa\044\ufffa\045\ufffa\051\ufffa\052\ufffa" +
    "\001\002\000\026\007\015\017\031\034\012\037\006\043" +
    "\032\047\027\050\016\054\017\055\021\056\005\001\002" +
    "\000\026\007\015\017\031\034\012\037\006\043\032\047" +
    "\027\050\016\054\017\055\021\056\005\001\002\000\004" +
    "\054\017\001\002\000\070\002\uffc8\004\uffc8\006\uffc8\010" +
    "\uffc8\011\uffc8\012\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\035\uffc8\036\uffc8\042\uffc8" +
    "\044\uffc8\045\uffc8\051\uffc8\052\uffc8\001\002\000\062\002" +
    "\uffc7\004\uffc7\006\uffc7\010\uffc7\012\uffc7\016\054\017\047" +
    "\020\060\021\051\022\055\023\053\024\061\025\056\026" +
    "\057\027\052\030\050\031\062\035\uffc7\036\uffc7\042\uffc7" +
    "\044\uffc7\045\uffc7\051\uffc7\052\uffc7\001\002\000\026\007" +
    "\015\017\031\034\012\037\006\043\032\047\027\050\016" +
    "\054\017\055\021\056\005\001\002\000\026\007\015\017" +
    "\031\034\012\037\006\043\032\047\027\050\016\054\017" +
    "\055\021\056\005\001\002\000\026\007\015\017\031\034" +
    "\012\037\006\043\032\047\027\050\016\054\017\055\021" +
    "\056\005\001\002\000\026\007\015\017\031\034\012\037" +
    "\006\043\032\047\027\050\016\054\017\055\021\056\005" +
    "\001\002\000\026\007\015\017\031\034\012\037\006\043" +
    "\032\047\027\050\016\054\017\055\021\056\005\001\002" +
    "\000\026\007\015\017\031\034\012\037\006\043\032\047" +
    "\027\050\016\054\017\055\021\056\005\001\002\000\026" +
    "\007\015\017\031\034\012\037\006\043\032\047\027\050" +
    "\016\054\017\055\021\056\005\001\002\000\026\007\015" +
    "\017\031\034\012\037\006\043\032\047\027\050\016\054" +
    "\017\055\021\056\005\001\002\000\026\007\015\017\031" +
    "\034\012\037\006\043\032\047\027\050\016\054\017\055" +
    "\021\056\005\001\002\000\026\007\015\017\031\034\012" +
    "\037\006\043\032\047\027\050\016\054\017\055\021\056" +
    "\005\001\002\000\026\007\015\017\031\034\012\037\006" +
    "\043\032\047\027\050\016\054\017\055\021\056\005\001" +
    "\002\000\026\007\015\017\031\034\012\037\006\043\032" +
    "\047\027\050\016\054\017\055\021\056\005\001\002\000" +
    "\062\002\uffe5\004\uffe5\006\uffe5\010\uffe5\012\uffe5\016\054" +
    "\017\047\020\060\021\051\022\055\023\053\024\061\025" +
    "\056\026\057\027\052\030\050\031\uffe5\035\uffe5\036\uffe5" +
    "\042\uffe5\044\uffe5\045\uffe5\051\uffe5\052\uffe5\001\002\000" +
    "\046\002\uffea\004\uffea\006\uffea\010\uffea\012\uffea\016\054" +
    "\017\047\020\060\021\051\030\uffea\031\uffea\035\uffea\036" +
    "\uffea\042\uffea\044\uffea\045\uffea\051\uffea\052\uffea\001\002" +
    "\000\062\002\uffee\004\uffee\006\uffee\010\uffee\012\uffee\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee" +
    "\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\035\uffee\036" +
    "\uffee\042\uffee\044\uffee\045\uffee\051\uffee\052\uffee\001\002" +
    "\000\046\002\uffe8\004\uffe8\006\uffe8\010\uffe8\012\uffe8\016" +
    "\054\017\047\020\060\021\051\030\uffe8\031\uffe8\035\uffe8" +
    "\036\uffe8\042\uffe8\044\uffe8\045\uffe8\051\uffe8\052\uffe8\001" +
    "\002\000\046\002\uffe9\004\uffe9\006\uffe9\010\uffe9\012\uffe9" +
    "\016\054\017\047\020\060\021\051\030\uffe9\031\uffe9\035" +
    "\uffe9\036\uffe9\042\uffe9\044\uffe9\045\uffe9\051\uffe9\052\uffe9" +
    "\001\002\000\046\002\uffec\004\uffec\006\uffec\010\uffec\012" +
    "\uffec\016\054\017\047\020\060\021\051\030\uffec\031\uffec" +
    "\035\uffec\036\uffec\042\uffec\044\uffec\045\uffec\051\uffec\052" +
    "\uffec\001\002\000\062\002\ufff0\004\ufff0\006\ufff0\010\ufff0" +
    "\012\ufff0\016\ufff0\017\ufff0\020\060\021\051\022\ufff0\023" +
    "\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0" +
    "\035\ufff0\036\ufff0\042\ufff0\044\ufff0\045\ufff0\051\ufff0\052" +
    "\ufff0\001\002\000\046\002\uffeb\004\uffeb\006\uffeb\010\uffeb" +
    "\012\uffeb\016\054\017\047\020\060\021\051\030\uffeb\031" +
    "\uffeb\035\uffeb\036\uffeb\042\uffeb\044\uffeb\045\uffeb\051\uffeb" +
    "\052\uffeb\001\002\000\046\002\uffe7\004\uffe7\006\uffe7\010" +
    "\uffe7\012\uffe7\016\054\017\047\020\060\021\051\030\uffe7" +
    "\031\uffe7\035\uffe7\036\uffe7\042\uffe7\044\uffe7\045\uffe7\051" +
    "\uffe7\052\uffe7\001\002\000\062\002\uffed\004\uffed\006\uffed" +
    "\010\uffed\012\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed" +
    "\031\uffed\035\uffed\036\uffed\042\uffed\044\uffed\045\uffed\051" +
    "\uffed\052\uffed\001\002\000\062\002\uffe6\004\uffe6\006\uffe6" +
    "\010\uffe6\012\uffe6\016\054\017\047\020\060\021\051\022" +
    "\055\023\053\024\061\025\056\026\057\027\052\030\uffe6" +
    "\031\uffe6\035\uffe6\036\uffe6\042\uffe6\044\uffe6\045\uffe6\051" +
    "\uffe6\052\uffe6\001\002\000\062\002\uffef\004\uffef\006\uffef" +
    "\010\uffef\012\uffef\016\uffef\017\uffef\020\060\021\051\022" +
    "\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef" +
    "\031\uffef\035\uffef\036\uffef\042\uffef\044\uffef\045\uffef\051" +
    "\uffef\052\uffef\001\002\000\034\012\100\016\054\017\047" +
    "\020\060\021\051\022\055\023\053\024\061\025\056\026" +
    "\057\027\052\030\050\031\062\001\002\000\070\002\uffc9" +
    "\004\uffc9\006\uffc9\010\uffc9\011\uffc9\012\uffc9\015\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\035" +
    "\uffc9\036\uffc9\042\uffc9\044\uffc9\045\uffc9\051\uffc9\052\uffc9" +
    "\001\002\000\004\054\017\001\002\000\010\044\uffd8\051" +
    "\uffd8\052\uffd8\001\002\000\010\044\130\051\105\052\101" +
    "\001\002\000\010\044\uffdb\051\uffdb\052\uffdb\001\002\000" +
    "\004\054\017\001\002\000\010\044\uffdd\051\uffdd\052\uffdd" +
    "\001\002\000\010\044\uffda\051\105\052\uffda\001\002\000" +
    "\010\044\uffd7\051\uffd7\052\uffd7\001\002\000\004\007\112" +
    "\001\002\000\004\054\017\001\002\000\006\004\uffd5\010" +
    "\uffd5\001\002\000\006\004\120\010\121\001\002\000\004" +
    "\005\116\001\002\000\004\054\017\001\002\000\006\004" +
    "\uffd3\010\uffd3\001\002\000\004\054\017\001\002\000\006" +
    "\005\123\022\uffd2\001\002\000\004\022\125\001\002\000" +
    "\004\054\017\001\002\000\006\022\uffd1\032\uffd1\001\002" +
    "\000\026\007\015\017\031\034\012\037\006\043\032\047" +
    "\027\050\016\054\017\055\021\056\005\001\002\000\040" +
    "\016\054\017\047\020\060\021\051\022\055\023\053\024" +
    "\061\025\056\026\057\027\052\030\050\031\062\044\uffd6" +
    "\051\uffd6\052\uffd6\001\002\000\006\004\uffd4\010\uffd4\001" +
    "\002\000\030\007\015\017\031\034\012\037\006\043\032" +
    "\045\133\047\027\050\016\054\017\055\021\056\005\001" +
    "\002\000\010\044\uffdc\051\uffdc\052\uffdc\001\002\000\006" +
    "\006\135\045\136\001\002\000\062\002\uffde\004\uffde\006" +
    "\uffde\010\uffde\012\uffde\016\uffde\017\uffde\020\uffde\021\uffde" +
    "\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\035\uffde\036\uffde\042\uffde\044\uffde\045\uffde" +
    "\051\uffde\052\uffde\001\002\000\040\006\uffe1\010\uffe1\016" +
    "\054\017\047\020\060\021\051\022\055\023\053\024\061" +
    "\025\056\026\057\027\052\030\050\031\062\045\uffe1\001" +
    "\002\000\026\007\015\017\031\034\012\037\006\043\032" +
    "\047\027\050\016\054\017\055\021\056\005\001\002\000" +
    "\062\002\uffdf\004\uffdf\006\uffdf\010\uffdf\012\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\035\uffdf\036\uffdf" +
    "\042\uffdf\044\uffdf\045\uffdf\051\uffdf\052\uffdf\001\002\000" +
    "\040\006\uffe0\010\uffe0\016\054\017\047\020\060\021\051" +
    "\022\055\023\053\024\061\025\056\026\057\027\052\030" +
    "\050\031\062\045\uffe0\001\002\000\006\005\123\032\uffd2" +
    "\001\002\000\004\032\142\001\002\000\026\007\015\017" +
    "\031\034\012\037\006\043\032\047\027\050\016\054\017" +
    "\055\021\056\005\001\002\000\040\016\054\017\047\020" +
    "\060\021\051\022\055\023\053\024\061\025\056\026\057" +
    "\027\052\030\050\031\062\044\uffd9\051\uffd9\052\uffd9\001" +
    "\002\000\062\002\uffe4\004\uffe4\006\uffe4\010\uffe4\012\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\035\uffe4" +
    "\036\uffe4\042\uffe4\044\uffe4\045\uffe4\051\uffe4\052\uffe4\001" +
    "\002\000\030\007\015\010\146\017\031\034\012\037\006" +
    "\043\032\047\027\050\016\054\017\055\021\056\005\001" +
    "\002\000\062\002\uffc5\004\uffc5\006\uffc5\010\uffc5\012\uffc5" +
    "\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\035\uffc5" +
    "\036\uffc5\042\uffc5\044\uffc5\045\uffc5\051\uffc5\052\uffc5\001" +
    "\002\000\036\004\uffc2\010\uffc2\016\054\017\047\020\060" +
    "\021\051\022\055\023\053\024\061\025\056\026\057\027" +
    "\052\030\050\031\062\001\002\000\006\004\uffc4\010\uffc4" +
    "\001\002\000\006\004\152\010\153\001\002\000\026\007" +
    "\015\017\031\034\012\037\006\043\032\047\027\050\016" +
    "\054\017\055\021\056\005\001\002\000\062\002\uffc6\004" +
    "\uffc6\006\uffc6\010\uffc6\012\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\035\uffc6\036\uffc6\042\uffc6\044\uffc6" +
    "\045\uffc6\051\uffc6\052\uffc6\001\002\000\006\004\uffc3\010" +
    "\uffc3\001\002\000\006\006\135\010\157\001\002\000\062" +
    "\002\uffe2\004\uffe2\006\uffe2\010\uffe2\012\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\035\uffe2\036\uffe2\042" +
    "\uffe2\044\uffe2\045\uffe2\051\uffe2\052\uffe2\001\002\000\062" +
    "\002\uffe3\004\uffe3\006\uffe3\010\uffe3\012\uffe3\016\uffe3\017" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\031\uffe3\035\uffe3\036\uffe3\042" +
    "\uffe3\044\uffe3\045\uffe3\051\uffe3\052\uffe3\001\002\000\004" +
    "\002\001\001\002\000\034\016\054\017\047\020\060\021" +
    "\051\022\055\023\053\024\061\025\056\026\057\027\052" +
    "\030\050\031\062\035\162\001\002\000\026\007\015\017" +
    "\031\034\012\037\006\043\032\047\027\050\016\054\017" +
    "\055\021\056\005\001\002\000\034\016\054\017\047\020" +
    "\060\021\051\022\055\023\053\024\061\025\056\026\057" +
    "\027\052\030\050\031\062\036\164\001\002\000\026\007" +
    "\015\017\031\034\012\037\006\043\032\047\027\050\016" +
    "\054\017\055\021\056\005\001\002\000\062\002\uffbf\004" +
    "\uffbf\006\uffbf\010\uffbf\012\uffbf\016\054\017\047\020\060" +
    "\021\051\022\055\023\053\024\061\025\056\026\057\027" +
    "\052\030\050\031\062\035\uffbf\036\uffbf\042\uffbf\044\uffbf" +
    "\045\uffbf\051\uffbf\052\uffbf\001\002\000\034\016\054\017" +
    "\047\020\060\021\051\022\055\023\053\024\061\025\056" +
    "\026\057\027\052\030\050\031\062\042\167\001\002\000" +
    "\026\007\015\017\031\034\012\037\006\043\032\047\027" +
    "\050\016\054\017\055\021\056\005\001\002\000\062\002" +
    "\uffc0\004\uffc0\006\uffc0\010\uffc0\012\uffc0\016\054\017\047" +
    "\020\060\021\051\022\055\023\053\024\061\025\056\026" +
    "\057\027\052\030\050\031\062\035\uffc0\036\uffc0\042\uffc0" +
    "\044\uffc0\045\uffc0\051\uffc0\052\uffc0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\052\002\010\003\027\004\033\005\032\006" +
    "\037\007\013\010\017\011\025\023\040\024\003\025\035" +
    "\026\006\027\036\030\024\031\022\034\007\035\034\036" +
    "\023\037\012\040\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\002\165\003\027\004\033\005\032\006" +
    "\037\010\017\011\025\023\040\024\003\025\035\026\006" +
    "\027\036\030\024\031\022\034\007\035\034\036\023\037" +
    "\012\040\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\002\160\003\027\004\033\005" +
    "\032\006\037\010\017\011\025\023\040\024\003\025\035" +
    "\026\006\027\036\030\024\031\022\034\007\035\034\036" +
    "\023\037\012\040\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\002\133\003\027\004\033\005\032\006" +
    "\037\010\017\011\025\013\154\023\040\024\003\025\035" +
    "\026\006\027\036\030\024\031\022\034\007\035\034\036" +
    "\023\037\012\040\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\002\143\003\027\004\033\005\032\006\037\010\017" +
    "\011\025\023\040\024\003\025\035\026\006\027\036\030" +
    "\024\031\022\034\007\035\034\036\023\037\012\040\021" +
    "\001\001\000\014\014\106\015\101\016\102\017\105\020" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\002\076\003\027\004\033" +
    "\005\032\006\037\010\017\011\025\023\040\024\003\025" +
    "\035\026\006\027\036\030\024\031\022\034\007\035\034" +
    "\036\023\037\012\040\021\001\001\000\050\002\045\003" +
    "\027\004\033\005\032\006\037\010\017\011\025\023\040" +
    "\024\003\025\035\026\006\027\036\030\024\031\022\034" +
    "\007\035\034\036\023\037\012\040\021\001\001\000\004" +
    "\011\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\002\075\003\027\004\033\005\032\006\037\010\017" +
    "\011\025\023\040\024\003\025\035\026\006\027\036\030" +
    "\024\031\022\034\007\035\034\036\023\037\012\040\021" +
    "\001\001\000\050\002\074\003\027\004\033\005\032\006" +
    "\037\010\017\011\025\023\040\024\003\025\035\026\006" +
    "\027\036\030\024\031\022\034\007\035\034\036\023\037" +
    "\012\040\021\001\001\000\050\002\073\003\027\004\033" +
    "\005\032\006\037\010\017\011\025\023\040\024\003\025" +
    "\035\026\006\027\036\030\024\031\022\034\007\035\034" +
    "\036\023\037\012\040\021\001\001\000\050\002\072\003" +
    "\027\004\033\005\032\006\037\010\017\011\025\023\040" +
    "\024\003\025\035\026\006\027\036\030\024\031\022\034" +
    "\007\035\034\036\023\037\012\040\021\001\001\000\050" +
    "\002\071\003\027\004\033\005\032\006\037\010\017\011" +
    "\025\023\040\024\003\025\035\026\006\027\036\030\024" +
    "\031\022\034\007\035\034\036\023\037\012\040\021\001" +
    "\001\000\050\002\070\003\027\004\033\005\032\006\037" +
    "\010\017\011\025\023\040\024\003\025\035\026\006\027" +
    "\036\030\024\031\022\034\007\035\034\036\023\037\012" +
    "\040\021\001\001\000\050\002\067\003\027\004\033\005" +
    "\032\006\037\010\017\011\025\023\040\024\003\025\035" +
    "\026\006\027\036\030\024\031\022\034\007\035\034\036" +
    "\023\037\012\040\021\001\001\000\050\002\066\003\027" +
    "\004\033\005\032\006\037\010\017\011\025\023\040\024" +
    "\003\025\035\026\006\027\036\030\024\031\022\034\007" +
    "\035\034\036\023\037\012\040\021\001\001\000\050\002" +
    "\065\003\027\004\033\005\032\006\037\010\017\011\025" +
    "\023\040\024\003\025\035\026\006\027\036\030\024\031" +
    "\022\034\007\035\034\036\023\037\012\040\021\001\001" +
    "\000\050\002\064\003\027\004\033\005\032\006\037\010" +
    "\017\011\025\023\040\024\003\025\035\026\006\027\036" +
    "\030\024\031\022\034\007\035\034\036\023\037\012\040" +
    "\021\001\001\000\050\002\063\003\027\004\033\005\032" +
    "\006\037\010\017\011\025\023\040\024\003\025\035\026" +
    "\006\027\036\030\024\031\022\034\007\035\034\036\023" +
    "\037\012\040\021\001\001\000\050\002\062\003\027\004" +
    "\033\005\032\006\037\010\017\011\025\023\040\024\003" +
    "\025\035\026\006\027\036\030\024\031\022\034\007\035" +
    "\034\036\023\037\012\040\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\137\001\001\000\002\001\001\000\012\014" +
    "\106\015\101\017\130\020\103\001\001\000\002\001\001" +
    "\000\004\011\110\001\001\000\002\001\001\000\004\015" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\114\021\112\022\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\116\001\001" +
    "\000\002\001\001\000\006\011\114\021\126\001\001\000" +
    "\004\012\121\001\001\000\002\001\001\000\004\011\123" +
    "\001\001\000\002\001\001\000\050\002\125\003\027\004" +
    "\033\005\032\006\037\010\017\011\025\023\040\024\003" +
    "\025\035\026\006\027\036\030\024\031\022\034\007\035" +
    "\034\036\023\037\012\040\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\002\133\003\027\004\033\005" +
    "\032\006\037\010\017\011\025\013\131\023\040\024\003" +
    "\025\035\026\006\027\036\030\024\031\022\034\007\035" +
    "\034\036\023\037\012\040\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\002\136\003\027\004\033\005\032\006\037\010\017" +
    "\011\025\023\040\024\003\025\035\026\006\027\036\030" +
    "\024\031\022\034\007\035\034\036\023\037\012\040\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\140\001\001\000\002\001\001\000\050\002\142\003\027" +
    "\004\033\005\032\006\037\010\017\011\025\023\040\024" +
    "\003\025\035\026\006\027\036\030\024\031\022\034\007" +
    "\035\034\036\023\037\012\040\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\002\146\003\027\004\033" +
    "\005\032\006\037\010\017\011\025\023\040\024\003\025" +
    "\035\026\006\027\036\030\024\031\022\032\150\033\147" +
    "\034\007\035\034\036\023\037\012\040\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\002\146\003\027\004\033\005\032\006" +
    "\037\010\017\011\025\023\040\024\003\025\035\026\006" +
    "\027\036\030\024\031\022\033\153\034\007\035\034\036" +
    "\023\037\012\040\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\002\162" +
    "\003\027\004\033\005\032\006\037\010\017\011\025\023" +
    "\040\024\003\025\035\026\006\027\036\030\024\031\022" +
    "\034\007\035\034\036\023\037\012\040\021\001\001\000" +
    "\002\001\001\000\050\002\164\003\027\004\033\005\032" +
    "\006\037\010\017\011\025\023\040\024\003\025\035\026" +
    "\006\027\036\030\024\031\022\034\007\035\034\036\023" +
    "\037\012\040\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\002\167\003\027\004\033\005\032\006\037" +
    "\010\017\011\025\023\040\024\003\025\035\026\006\027" +
    "\036\030\024\031\022\034\007\035\034\036\023\037\012" +
    "\040\021\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    @Override
    public void syntax_error(Symbol s) {
        Position p = new Position(s.left, s.right);
        Errors.error(p, "Parser Error");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ifExp ::= IF exp THEN exp ELSE exp 
            {
              IfExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfExp(new Position(ileft,iright),e1,e2,e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifExp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // whileExp ::= WHILE exp DO exp 
            {
              WhileExp RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT = new WhileExp(new Position(wleft,wright),e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileExp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // breakExp ::= BREAK 
            {
              BreakExp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT = new BreakExp(new Position(bleft,bright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("breakExp",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // argument ::= exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arguments ::= arguments COMMA argument 
            {
              LinkedList<Exp> RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Exp> as = (LinkedList<Exp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 as.add(a); RESULT = as; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arguments ::= argument 
            {
              LinkedList<Exp> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		LinkedList<Exp> l = new LinkedList<Exp>(); l.add(a);
		RESULT = l;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // callExp ::= id LPAREN RPAREN 
            {
              CallExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallExp(new Position(ileft,iright),i,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callExp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // callExp ::= id LPAREN arguments RPAREN 
            {
              CallExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Exp> as = (LinkedList<Exp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallExp(new Position(ileft,iright),i,as); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callExp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assignExp ::= var ASSIGN exp 
            {
              AssignExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignExp(new Position(vleft,vright),v,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignExp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // recordVar ::= var DOT id 
            {
              RecordVar RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RecordVar(new Position(vleft,vright),v,i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recordVar",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arrayVar ::= var LBRACK exp RBRACK 
            {
              ArrayVar RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayVar(new Position(vleft,vright),v,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayVar",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // simpleVar ::= id 
            {
              SimpleVar RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimpleVar(new Position(ileft,iright),i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleVar",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // var ::= recordVar 
            {
              Var RESULT =null;
		int rvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RecordVar rv = (RecordVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // var ::= arrayVar 
            {
              Var RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayVar av = (ArrayVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = av; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // var ::= simpleVar 
            {
              Var RESULT =null;
		int svleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int svright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleVar sv = (SimpleVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stringExp ::= STRING 
            {
              StringExp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringExp(new Position(sleft,sright),s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringExp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // nilExp ::= NIL 
            {
              NilExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NilExp(new Position(nleft,nright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nilExp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // id ::= ID 
            {
              Id RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Id.create(i);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // typeannotation ::= COLON id 
            {
              Id RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeannotation",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // typeannotation ::= 
            {
              Id RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeannotation",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // param ::= id COLON id 
            {
              VarDec RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Id i1 = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Id i2 = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDec(new Position(i1left,i1right),i1,i2,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // params ::= params COMMA param 
            {
              LinkedList<VarDec> RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<VarDec> ps = (LinkedList<VarDec>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec p = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ps.add(p); RESULT = ps; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // params ::= param 
            {
              LinkedList<VarDec> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec p = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                LinkedList<VarDec> l = new LinkedList<VarDec>(); l.add(p);
                RESULT = l;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // funcDec ::= FUNCTION id LPAREN params RPAREN typeannotation EQ exp 
            {
              FuncDec RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<VarDec> ps = (LinkedList<VarDec>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Id t = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FuncDec(new Position(fleft,fright),i,ps,t,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcDec",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // funcsDec ::= funcsDec funcDec 
            {
              FuncsDec RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FuncsDec ds = (FuncsDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FuncDec d = (FuncDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ds.funcs.add(d); RESULT = ds; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcsDec",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // funcsDec ::= funcDec 
            {
              FuncsDec RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FuncDec d = (FuncDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                LinkedList<FuncDec> l = new LinkedList<FuncDec>(); l.add(d);
                RESULT = new FuncsDec(new Position(dleft,dright),l);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcsDec",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // varDec ::= VAR id typeannotation ASSIGN exp 
            {
              Dec RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Id t = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDec(new Position(vleft,vright),i,t,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDec",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // dec ::= funcsDec 
            {
              Dec RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FuncsDec fs = (FuncsDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // dec ::= varDec 
            {
              Dec RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec v = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // decs ::= decs dec 
            {
              LinkedList<Dec> RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Dec> ds = (LinkedList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ds.add(d); RESULT = ds; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decs",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // decs ::= dec 
            {
              LinkedList<Dec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                LinkedList<Dec> l = new LinkedList<Dec>(); l.add(d);
                RESULT = l;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decs",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // letExp ::= LET decs IN END 
            {
              LetExp RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Dec> ds = (LinkedList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new LetExp(new Position(ltleft,ltright),ds,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("letExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // letExp ::= LET decs IN exps END 
            {
              LetExp RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Dec> ds = (LinkedList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SeqExp es = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LetExp(new Position(ltleft,ltright),ds,es); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("letExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exps ::= exps SEMICOLON exp 
            {
              SeqExp RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SeqExp es = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  es.exps.add(e); RESULT = es; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exps",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exps ::= exp 
            {
              SeqExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            LinkedList<Exp> l = new LinkedList<Exp>(); l.add(e);
            RESULT = new SeqExp(new Position(eleft,eright), l); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exps",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // seqExp ::= LPAREN RPAREN 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Exp> l = new LinkedList<Exp>(); RESULT = new SeqExp(new Position(sleft,sright), l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seqExp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // seqExp ::= LPAREN exps RPAREN 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SeqExp es = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=es; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seqExp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // negExp ::= MINUS exp 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(new Position(pleft,pright), new IntegerExp(new Position(pleft,pright), 0), "-", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("negExp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // opExp ::= exp OR exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new IfExp(new Position(pleft,pright), e1, new IntegerExp(new Position(pleft,pright), 1), e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opExp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // opExp ::= exp AND exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
           RESULT = new IfExp(new Position(pleft,pright), e1, e2, new IntegerExp(new Position(pleft,pright), 0));
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opExp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // opExp ::= exp GE exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(new Position(pleft,pright), e1, ">=", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opExp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // opExp ::= exp GT exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(new Position(pleft,pright), e1, ">", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opExp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // opExp ::= exp LE exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(new Position(pleft,pright), e1, "<=", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opExp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // opExp ::= exp LT exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(new Position(pleft,pright), e1, "<", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opExp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // opExp ::= exp NEQ exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(new Position(pleft,pright), e1, "<>", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opExp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // opExp ::= exp EQ exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(new Position(pleft,pright), e1, "==", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opExp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // opExp ::= exp DIVIDE exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(new Position(pleft,pright), e1, "/", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opExp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // opExp ::= exp TIMES exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(new Position(pleft,pright), e1, "*", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opExp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // opExp ::= exp MINUS exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(new Position(pleft,pright), e1, "-", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opExp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // opExp ::= exp PLUS exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(new Position(pleft,pright), e1, "+", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opExp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // intExp ::= INT 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntegerExp(new Position(nleft,nright), n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intExp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= forExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ForExp e = (ForExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= whileExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileExp e = (WhileExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= ifExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfExp e = (IfExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= breakExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BreakExp e = (BreakExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= callExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallExp e = (CallExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= assignExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignExp e = (AssignExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp ::= var 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var e = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp ::= stringExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StringExp e = (StringExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp ::= nilExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NilExp e = (NilExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exp ::= letExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LetExp e = (LetExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // exp ::= seqExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // exp ::= negExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // exp ::= opExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exp ::= intExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = e;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp start_val = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

